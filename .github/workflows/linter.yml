name: Lint Code Base

on:
  push:
  pull_request:
    branches:
      - main

jobs:
  super-linter:
    name: Super Linter
    uses: harryzcy/github-actions/.github/workflows/linter.yml@main

  prettier:
    name: Prettier
    uses: harryzcy/github-actions/.github/workflows/prettier.yml@main

  spelling:
    name: Spelling
    uses: harryzcy/github-actions/.github/workflows/spelling.yml@main

  project-yaml:
    name: Project YAML Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Check project yaml
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs')
            const data = fs.readFileSync('src/projects.yaml', 'utf8')
            const lines = data.split('\n')
            const perProjectLines = []
            for (const line of lines) {
              if (line.startsWith('- name:')) {
                perProjectLines.push([])
              }
              let fieldValue = line.replace('- ', '').trim()
              if (fieldValue.startsWith('#')) continue
              perProjectLines[perProjectLines.length - 1].push(fieldValue)
            }

            const expectedOrder = [
              'name',
              'full_name',
              'url',
              'start_year',
              'created_at',
              'status',
              'lang',
              'lang_class',
              'release_num',
              'description'
            ]

            let hasError = false
            for (const lines of perProjectLines) {
              const fields = []
              for (const line of lines) {
                const [field] = line.split(':')
                if (field === 'description') {
                  break
                }
                fields.push(field.trim())
              }
              const orderFiltered = expectedOrder.filter((field) => fields.includes(field))
              const equal = fields.every((field, index) => field === orderFiltered[index])
              if (!equal) {
                console.log(`Project ${lines[0]} has incorrect field order`)
                console.log(`Expected: ${orderFiltered.join(', ')}`)
                console.log(`Actual: ${fields.join(', ')}`)
                hasError = true
              }
            }

            if (hasError) {
              throw new Error('Project YAML check failed')
            }

  project-date:
    name: Project Date Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install yaml

      - name: Check project date
        uses: actions/github-script@v6
        with:
          script: |
            const YAML = require('yaml')
            const fs = require('fs')

            const projects = YAML.parse(fs.readFileSync('src/projects.yaml', 'utf8'))
            let hasError = false
            for (const project of projects) {
              if (project.url === undefined || !project.url.startsWith('https://github.com/')) {
                console.log(`${project.name}: ${project.url ? 'invalid url ' + project.url : 'missing url'} (skipped)`)
                continue
              }
              const repoName = project.url.replace('https://github.com/', '')
              console.log(`${project.name}: ${repoName} ✅`)
              const [owner, repo] = repoName.split('/')
              const { data } = await github.rest.repos.get({
                owner,
                repo
              })
              const createdAt = /[0-9]{4}-[0-9]{2}-[0-9]{2}/.exec(data.created_at)[0]
              if (project.created_at !== createdAt) {
                console.log(`Project ${project.name} has incorrect created_at date`)
                console.log(`Expected: ${project.created_at}`)
                console.log(`Actual: ${createdAt}`)
                hasError = true
              }
            }
            if (hasError) {
              throw new Error('Project date check failed')
            } else {
              console.log('\nProject date check passed ✅')
            }
